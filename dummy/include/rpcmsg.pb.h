// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcmsg.proto

#ifndef PROTOBUF_rpcmsg_2eproto__INCLUDED
#define PROTOBUF_rpcmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace wisc {
namespace RPCMsgProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpcmsg_2eproto();
void protobuf_AssignDesc_rpcmsg_2eproto();
void protobuf_ShutdownFile_rpcmsg_2eproto();

class RPCMsg;
class RPCString;
class RPCWord;
class RPCStringArray;
class RPCWordArray;

// ===================================================================

class RPCMsg : public ::google::protobuf::MessageLite {
 public:
  RPCMsg();
  virtual ~RPCMsg();

  RPCMsg(const RPCMsg& from);

  inline RPCMsg& operator=(const RPCMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const RPCMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RPCMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RPCMsg* other);

  // implements Message ----------------------------------------------

  RPCMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RPCMsg& from);
  void MergeFrom(const RPCMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string method = 1;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 1;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  inline void set_allocated_method(::std::string* method);

  // repeated .wisc.RPCMsgProto.RPCString string_fields = 2;
  inline int string_fields_size() const;
  inline void clear_string_fields();
  static const int kStringFieldsFieldNumber = 2;
  inline const ::wisc::RPCMsgProto::RPCString& string_fields(int index) const;
  inline ::wisc::RPCMsgProto::RPCString* mutable_string_fields(int index);
  inline ::wisc::RPCMsgProto::RPCString* add_string_fields();
  inline const ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCString >&
      string_fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCString >*
      mutable_string_fields();

  // repeated .wisc.RPCMsgProto.RPCWord word_fields = 3;
  inline int word_fields_size() const;
  inline void clear_word_fields();
  static const int kWordFieldsFieldNumber = 3;
  inline const ::wisc::RPCMsgProto::RPCWord& word_fields(int index) const;
  inline ::wisc::RPCMsgProto::RPCWord* mutable_word_fields(int index);
  inline ::wisc::RPCMsgProto::RPCWord* add_word_fields();
  inline const ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCWord >&
      word_fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCWord >*
      mutable_word_fields();

  // repeated .wisc.RPCMsgProto.RPCStringArray stringarray_fields = 4;
  inline int stringarray_fields_size() const;
  inline void clear_stringarray_fields();
  static const int kStringarrayFieldsFieldNumber = 4;
  inline const ::wisc::RPCMsgProto::RPCStringArray& stringarray_fields(int index) const;
  inline ::wisc::RPCMsgProto::RPCStringArray* mutable_stringarray_fields(int index);
  inline ::wisc::RPCMsgProto::RPCStringArray* add_stringarray_fields();
  inline const ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCStringArray >&
      stringarray_fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCStringArray >*
      mutable_stringarray_fields();

  // repeated .wisc.RPCMsgProto.RPCWordArray wordarray_fields = 5;
  inline int wordarray_fields_size() const;
  inline void clear_wordarray_fields();
  static const int kWordarrayFieldsFieldNumber = 5;
  inline const ::wisc::RPCMsgProto::RPCWordArray& wordarray_fields(int index) const;
  inline ::wisc::RPCMsgProto::RPCWordArray* mutable_wordarray_fields(int index);
  inline ::wisc::RPCMsgProto::RPCWordArray* add_wordarray_fields();
  inline const ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCWordArray >&
      wordarray_fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCWordArray >*
      mutable_wordarray_fields();

  // @@protoc_insertion_point(class_scope:wisc.RPCMsgProto.RPCMsg)
 private:
  inline void set_has_method();
  inline void clear_has_method();

  ::std::string* method_;
  ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCString > string_fields_;
  ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCWord > word_fields_;
  ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCStringArray > stringarray_fields_;
  ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCWordArray > wordarray_fields_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rpcmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rpcmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_rpcmsg_2eproto();
  friend void protobuf_ShutdownFile_rpcmsg_2eproto();

  void InitAsDefaultInstance();
  static RPCMsg* default_instance_;
};
// -------------------------------------------------------------------

class RPCString : public ::google::protobuf::MessageLite {
 public:
  RPCString();
  virtual ~RPCString();

  RPCString(const RPCString& from);

  inline RPCString& operator=(const RPCString& from) {
    CopyFrom(from);
    return *this;
  }

  static const RPCString& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RPCString* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RPCString* other);

  // implements Message ----------------------------------------------

  RPCString* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RPCString& from);
  void MergeFrom(const RPCString& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:wisc.RPCMsgProto.RPCString)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string* name_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rpcmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rpcmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_rpcmsg_2eproto();
  friend void protobuf_ShutdownFile_rpcmsg_2eproto();

  void InitAsDefaultInstance();
  static RPCString* default_instance_;
};
// -------------------------------------------------------------------

class RPCWord : public ::google::protobuf::MessageLite {
 public:
  RPCWord();
  virtual ~RPCWord();

  RPCWord(const RPCWord& from);

  inline RPCWord& operator=(const RPCWord& from) {
    CopyFrom(from);
    return *this;
  }

  static const RPCWord& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RPCWord* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RPCWord* other);

  // implements Message ----------------------------------------------

  RPCWord* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RPCWord& from);
  void MergeFrom(const RPCWord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:wisc.RPCMsgProto.RPCWord)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string* name_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rpcmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rpcmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_rpcmsg_2eproto();
  friend void protobuf_ShutdownFile_rpcmsg_2eproto();

  void InitAsDefaultInstance();
  static RPCWord* default_instance_;
};
// -------------------------------------------------------------------

class RPCStringArray : public ::google::protobuf::MessageLite {
 public:
  RPCStringArray();
  virtual ~RPCStringArray();

  RPCStringArray(const RPCStringArray& from);

  inline RPCStringArray& operator=(const RPCStringArray& from) {
    CopyFrom(from);
    return *this;
  }

  static const RPCStringArray& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RPCStringArray* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RPCStringArray* other);

  // implements Message ----------------------------------------------

  RPCStringArray* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RPCStringArray& from);
  void MergeFrom(const RPCStringArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated bytes value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const void* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // @@protoc_insertion_point(class_scope:wisc.RPCMsgProto.RPCStringArray)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rpcmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rpcmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_rpcmsg_2eproto();
  friend void protobuf_ShutdownFile_rpcmsg_2eproto();

  void InitAsDefaultInstance();
  static RPCStringArray* default_instance_;
};
// -------------------------------------------------------------------

class RPCWordArray : public ::google::protobuf::MessageLite {
 public:
  RPCWordArray();
  virtual ~RPCWordArray();

  RPCWordArray(const RPCWordArray& from);

  inline RPCWordArray& operator=(const RPCWordArray& from) {
    CopyFrom(from);
    return *this;
  }

  static const RPCWordArray& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RPCWordArray* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RPCWordArray* other);

  // implements Message ----------------------------------------------

  RPCWordArray* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RPCWordArray& from);
  void MergeFrom(const RPCWordArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated uint32 value = 2 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::uint32 value);
  inline void add_value(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:wisc.RPCMsgProto.RPCWordArray)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > value_;
  mutable int _value_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rpcmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rpcmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_rpcmsg_2eproto();
  friend void protobuf_ShutdownFile_rpcmsg_2eproto();

  void InitAsDefaultInstance();
  static RPCWordArray* default_instance_;
};
// ===================================================================


// ===================================================================

// RPCMsg

// required string method = 1;
inline bool RPCMsg::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCMsg::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPCMsg::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPCMsg::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& RPCMsg::method() const {
  return *method_;
}
inline void RPCMsg::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RPCMsg::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RPCMsg::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCMsg::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* RPCMsg::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RPCMsg::set_allocated_method(::std::string* method) {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (method) {
    set_has_method();
    method_ = method;
  } else {
    clear_has_method();
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .wisc.RPCMsgProto.RPCString string_fields = 2;
inline int RPCMsg::string_fields_size() const {
  return string_fields_.size();
}
inline void RPCMsg::clear_string_fields() {
  string_fields_.Clear();
}
inline const ::wisc::RPCMsgProto::RPCString& RPCMsg::string_fields(int index) const {
  return string_fields_.Get(index);
}
inline ::wisc::RPCMsgProto::RPCString* RPCMsg::mutable_string_fields(int index) {
  return string_fields_.Mutable(index);
}
inline ::wisc::RPCMsgProto::RPCString* RPCMsg::add_string_fields() {
  return string_fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCString >&
RPCMsg::string_fields() const {
  return string_fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCString >*
RPCMsg::mutable_string_fields() {
  return &string_fields_;
}

// repeated .wisc.RPCMsgProto.RPCWord word_fields = 3;
inline int RPCMsg::word_fields_size() const {
  return word_fields_.size();
}
inline void RPCMsg::clear_word_fields() {
  word_fields_.Clear();
}
inline const ::wisc::RPCMsgProto::RPCWord& RPCMsg::word_fields(int index) const {
  return word_fields_.Get(index);
}
inline ::wisc::RPCMsgProto::RPCWord* RPCMsg::mutable_word_fields(int index) {
  return word_fields_.Mutable(index);
}
inline ::wisc::RPCMsgProto::RPCWord* RPCMsg::add_word_fields() {
  return word_fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCWord >&
RPCMsg::word_fields() const {
  return word_fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCWord >*
RPCMsg::mutable_word_fields() {
  return &word_fields_;
}

// repeated .wisc.RPCMsgProto.RPCStringArray stringarray_fields = 4;
inline int RPCMsg::stringarray_fields_size() const {
  return stringarray_fields_.size();
}
inline void RPCMsg::clear_stringarray_fields() {
  stringarray_fields_.Clear();
}
inline const ::wisc::RPCMsgProto::RPCStringArray& RPCMsg::stringarray_fields(int index) const {
  return stringarray_fields_.Get(index);
}
inline ::wisc::RPCMsgProto::RPCStringArray* RPCMsg::mutable_stringarray_fields(int index) {
  return stringarray_fields_.Mutable(index);
}
inline ::wisc::RPCMsgProto::RPCStringArray* RPCMsg::add_stringarray_fields() {
  return stringarray_fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCStringArray >&
RPCMsg::stringarray_fields() const {
  return stringarray_fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCStringArray >*
RPCMsg::mutable_stringarray_fields() {
  return &stringarray_fields_;
}

// repeated .wisc.RPCMsgProto.RPCWordArray wordarray_fields = 5;
inline int RPCMsg::wordarray_fields_size() const {
  return wordarray_fields_.size();
}
inline void RPCMsg::clear_wordarray_fields() {
  wordarray_fields_.Clear();
}
inline const ::wisc::RPCMsgProto::RPCWordArray& RPCMsg::wordarray_fields(int index) const {
  return wordarray_fields_.Get(index);
}
inline ::wisc::RPCMsgProto::RPCWordArray* RPCMsg::mutable_wordarray_fields(int index) {
  return wordarray_fields_.Mutable(index);
}
inline ::wisc::RPCMsgProto::RPCWordArray* RPCMsg::add_wordarray_fields() {
  return wordarray_fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCWordArray >&
RPCMsg::wordarray_fields() const {
  return wordarray_fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::wisc::RPCMsgProto::RPCWordArray >*
RPCMsg::mutable_wordarray_fields() {
  return &wordarray_fields_;
}

// -------------------------------------------------------------------

// RPCString

// required string name = 1;
inline bool RPCString::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCString::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPCString::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPCString::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RPCString::name() const {
  return *name_;
}
inline void RPCString::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RPCString::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RPCString::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCString::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RPCString::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RPCString::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 2;
inline bool RPCString::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RPCString::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RPCString::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RPCString::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& RPCString::value() const {
  return *value_;
}
inline void RPCString::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void RPCString::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void RPCString::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCString::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* RPCString::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RPCString::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RPCWord

// required string name = 1;
inline bool RPCWord::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCWord::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPCWord::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPCWord::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RPCWord::name() const {
  return *name_;
}
inline void RPCWord::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RPCWord::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RPCWord::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCWord::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RPCWord::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RPCWord::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 value = 2;
inline bool RPCWord::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RPCWord::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RPCWord::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RPCWord::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 RPCWord::value() const {
  return value_;
}
inline void RPCWord::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// RPCStringArray

// required string name = 1;
inline bool RPCStringArray::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCStringArray::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPCStringArray::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPCStringArray::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RPCStringArray::name() const {
  return *name_;
}
inline void RPCStringArray::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RPCStringArray::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RPCStringArray::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCStringArray::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RPCStringArray::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RPCStringArray::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated bytes value = 2;
inline int RPCStringArray::value_size() const {
  return value_.size();
}
inline void RPCStringArray::clear_value() {
  value_.Clear();
}
inline const ::std::string& RPCStringArray::value(int index) const {
  return value_.Get(index);
}
inline ::std::string* RPCStringArray::mutable_value(int index) {
  return value_.Mutable(index);
}
inline void RPCStringArray::set_value(int index, const ::std::string& value) {
  value_.Mutable(index)->assign(value);
}
inline void RPCStringArray::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
}
inline void RPCStringArray::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCStringArray::add_value() {
  return value_.Add();
}
inline void RPCStringArray::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
}
inline void RPCStringArray::add_value(const char* value) {
  value_.Add()->assign(value);
}
inline void RPCStringArray::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RPCStringArray::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RPCStringArray::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// RPCWordArray

// required string name = 1;
inline bool RPCWordArray::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCWordArray::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPCWordArray::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPCWordArray::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RPCWordArray::name() const {
  return *name_;
}
inline void RPCWordArray::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RPCWordArray::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RPCWordArray::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCWordArray::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RPCWordArray::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RPCWordArray::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 value = 2 [packed = true];
inline int RPCWordArray::value_size() const {
  return value_.size();
}
inline void RPCWordArray::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::uint32 RPCWordArray::value(int index) const {
  return value_.Get(index);
}
inline void RPCWordArray::set_value(int index, ::google::protobuf::uint32 value) {
  value_.Set(index, value);
}
inline void RPCWordArray::add_value(::google::protobuf::uint32 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RPCWordArray::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RPCWordArray::mutable_value() {
  return &value_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RPCMsgProto
}  // namespace wisc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpcmsg_2eproto__INCLUDED
